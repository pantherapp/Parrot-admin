{"ast":null,"code":"const addUploadFeature = requestHandler => async (type, resource, params) => {\n  if (type === 'UPDATE' || type === 'CREATE') {\n    let newParams = {};\n\n    for (const [key, value] of Object.entries(params.data)) {\n      if (Array.isArray(value)) {\n        newParams[key] = await convertToArrayOfBase64Objects(value);\n      }\n\n      if (value && value.rawFile instanceof File) {\n        newParams[key] = await convertToBase64Object(value);\n      }\n    }\n\n    params.data = { ...params.data,\n      ...newParams\n    };\n  }\n\n  return requestHandler(type, resource, params);\n};\n\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file.rawFile);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = reject;\n});\n\nconst convertToBase64Object = async file => {\n  return {\n    src: await convertFileToBase64(file),\n    title: `${file.title}`\n  };\n};\n\nconst convertToArrayOfBase64Objects = async array => {\n  const formerFields = array.filter(p => !(p.rawFile instanceof File));\n  const newFiles = array.filter(p => p.rawFile instanceof File);\n  const transformedNewFiles = await Promise.all(newFiles.map(convertToBase64Object));\n  return [...transformedNewFiles, ...formerFields];\n};\n\nexport default addUploadFeature;","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/src/lib/Base64Uploader.js"],"names":["addUploadFeature","requestHandler","type","resource","params","newParams","key","value","Object","entries","data","Array","isArray","convertToArrayOfBase64Objects","rawFile","File","convertToBase64Object","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","src","title","array","formerFields","filter","p","newFiles","transformedNewFiles","all","map"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,cAAc,IAAI,OAAOC,IAAP,EAAaC,QAAb,EAAuBC,MAAvB,KAAkC;AACzE,MAAIF,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,QAAlC,EAA4C;AAC1C,QAAIG,SAAS,GAAG,EAAhB;;AACA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeL,MAAM,CAACM,IAAtB,CAA3B,EAAwD;AACtD,UAAIC,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACxBF,QAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,MAAMO,6BAA6B,CAACN,KAAD,CAApD;AACD;;AACD,UAAIA,KAAK,IAAIA,KAAK,CAACO,OAAN,YAAyBC,IAAtC,EAA4C;AAC1CV,QAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,MAAMU,qBAAqB,CAACT,KAAD,CAA5C;AACD;AACF;;AAEDH,IAAAA,MAAM,CAACM,IAAP,GAAc,EACZ,GAAGN,MAAM,CAACM,IADE;AAEZ,SAAGL;AAFS,KAAd;AAID;;AACD,SAAOJ,cAAc,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,CAArB;AACD,CAlBH;;AAoBE,MAAMa,mBAAmB,GAAGC,IAAI,IAC9B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBN,IAAI,CAACJ,OAA1B;;AAEAQ,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;AACAJ,EAAAA,MAAM,CAACK,OAAP,GAAiBN,MAAjB;AACD,CAND,CADF;;AASA,MAAML,qBAAqB,GAAG,MAAME,IAAN,IAAc;AAC1C,SAAO;AACLU,IAAAA,GAAG,EAAE,MAAMX,mBAAmB,CAACC,IAAD,CADzB;AAELW,IAAAA,KAAK,EAAG,GAAEX,IAAI,CAACW,KAAM;AAFhB,GAAP;AAID,CALD;;AAOA,MAAMhB,6BAA6B,GAAG,MAAMiB,KAAN,IAAe;AACnD,QAAMC,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaC,CAAC,IAAI,EAAEA,CAAC,CAACnB,OAAF,YAAqBC,IAAvB,CAAlB,CAArB;AACA,QAAMmB,QAAQ,GAAGJ,KAAK,CAACE,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACnB,OAAF,YAAqBC,IAAvC,CAAjB;AACA,QAAMoB,mBAAmB,GAAG,MAAMhB,OAAO,CAACiB,GAAR,CAAYF,QAAQ,CAACG,GAAT,CAAarB,qBAAb,CAAZ,CAAlC;AAEA,SAAO,CAAC,GAAGmB,mBAAJ,EAAyB,GAAGJ,YAA5B,CAAP;AACD,CAND;;AAQA,eAAe/B,gBAAf","sourcesContent":["const addUploadFeature = requestHandler => async (type, resource, params) => {\n    if (type === 'UPDATE' || type === 'CREATE') {\n      let newParams = {};\n      for (const [key, value] of Object.entries(params.data)) {\n        if (Array.isArray(value)) {\n          newParams[key] = await convertToArrayOfBase64Objects(value);\n        }\n        if (value && value.rawFile instanceof File) {\n          newParams[key] = await convertToBase64Object(value);\n        }\n      }\n  \n      params.data = {\n        ...params.data,\n        ...newParams\n      };\n    }\n    return requestHandler(type, resource, params);\n  };\n  \n  const convertFileToBase64 = file =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file.rawFile);\n  \n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n    });\n  \n  const convertToBase64Object = async file => {\n    return {\n      src: await convertFileToBase64(file),\n      title: `${file.title}`\n    };\n  };\n  \n  const convertToArrayOfBase64Objects = async array => {\n    const formerFields = array.filter(p => !(p.rawFile instanceof File));\n    const newFiles = array.filter(p => p.rawFile instanceof File);\n    const transformedNewFiles = await Promise.all(newFiles.map(convertToBase64Object));\n  \n    return [...transformedNewFiles, ...formerFields];\n  };\n  \n  export default addUploadFeature;"]},"metadata":{},"sourceType":"module"}