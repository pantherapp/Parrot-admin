{"ast":null,"code":"var objectPath = require('object-path');\n\nvar sortBy;\nvar sort;\nvar type;\n/**\n * Filters args based on their type\n * @param  {String} type Type of property to filter by\n * @return {Function}\n */\n\ntype = function type(_type) {\n  return function (arg) {\n    return typeof arg === _type;\n  };\n};\n/**\n * Return a comparator function\n * @param  {String} property The key to sort by\n * @param  {Function} map Function to apply to each property\n * @return {Function}        Returns the comparator function\n */\n\n\nsort = function sort(property, map) {\n  var sortOrder = 1;\n\n  var apply = map || function (_, value) {\n    return value;\n  };\n\n  if (property[0] === \"-\") {\n    sortOrder = -1;\n    property = property.substr(1);\n  }\n\n  return function fn(a, b) {\n    var result;\n    var am = apply(property, objectPath.get(a, property));\n    var bm = apply(property, objectPath.get(b, property));\n    if (am < bm) result = -1;\n    if (am > bm) result = 1;\n    if (am === bm) result = 0;\n    return result * sortOrder;\n  };\n};\n/**\n * Return a comparator function that sorts by multiple keys\n * @return {Function} Returns the comparator function\n */\n\n\nsortBy = function sortBy() {\n  var args = Array.prototype.slice.call(arguments);\n  var properties = args.filter(type('string'));\n  var map = args.filter(type('function'))[0];\n  return function fn(obj1, obj2) {\n    var numberOfProperties = properties.length,\n        result = 0,\n        i = 0;\n    /* try getting a different result from 0 (equal)\n     * as long as we have extra properties to compare\n     */\n\n    while (result === 0 && i < numberOfProperties) {\n      result = sort(properties[i], map)(obj1, obj2);\n      i++;\n    }\n\n    return result;\n  };\n};\n/**\n * Expose `sortBy`\n * @type {Function}\n */\n\n\nmodule.exports = sortBy;","map":{"version":3,"sources":["/Users/yrm/Sites/nudge/node_modules/sort-by/index.js"],"names":["objectPath","require","sortBy","sort","type","arg","property","map","sortOrder","apply","_","value","substr","fn","a","b","result","am","get","bm","args","Array","prototype","slice","call","arguments","properties","filter","obj1","obj2","numberOfProperties","length","i","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIC,MAAJ;AACA,IAAIC,IAAJ;AACA,IAAIC,IAAJ;AAEA;;;;;;AAKAA,IAAI,GAAG,cAASA,KAAT,EAAe;AAClB,SAAO,UAASC,GAAT,EAAc;AACjB,WAAO,OAAOA,GAAP,KAAeD,KAAtB;AACH,GAFD;AAGH,CAJD;AAMA;;;;;;;;AAMAD,IAAI,GAAG,SAASA,IAAT,CAAcG,QAAd,EAAwBC,GAAxB,EAA6B;AAChC,MAAIC,SAAS,GAAG,CAAhB;;AACA,MAAIC,KAAK,GAAGF,GAAG,IAAI,UAASG,CAAT,EAAYC,KAAZ,EAAmB;AAAE,WAAOA,KAAP;AAAc,GAAtD;;AAEA,MAAIL,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;AACrBE,IAAAA,SAAS,GAAG,CAAC,CAAb;AACAF,IAAAA,QAAQ,GAAGA,QAAQ,CAACM,MAAT,CAAgB,CAAhB,CAAX;AACH;;AAED,SAAO,SAASC,EAAT,CAAYC,CAAZ,EAAcC,CAAd,EAAiB;AACpB,QAAIC,MAAJ;AACA,QAAIC,EAAE,GAAGR,KAAK,CAACH,QAAD,EAAWN,UAAU,CAACkB,GAAX,CAAeJ,CAAf,EAAkBR,QAAlB,CAAX,CAAd;AACA,QAAIa,EAAE,GAAGV,KAAK,CAACH,QAAD,EAAWN,UAAU,CAACkB,GAAX,CAAeH,CAAf,EAAkBT,QAAlB,CAAX,CAAd;AACA,QAAIW,EAAE,GAAGE,EAAT,EAAaH,MAAM,GAAG,CAAC,CAAV;AACb,QAAIC,EAAE,GAAGE,EAAT,EAAaH,MAAM,GAAG,CAAT;AACb,QAAIC,EAAE,KAAKE,EAAX,EAAeH,MAAM,GAAG,CAAT;AACf,WAAOA,MAAM,GAAGR,SAAhB;AACH,GARD;AASH,CAlBD;AAoBA;;;;;;AAIAN,MAAM,GAAG,SAASA,MAAT,GAAkB;AAEvB,MAAIkB,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAX;AACA,MAAIC,UAAU,GAAGN,IAAI,CAACO,MAAL,CAAYvB,IAAI,CAAC,QAAD,CAAhB,CAAjB;AACA,MAAIG,GAAG,GAAGa,IAAI,CAACO,MAAL,CAAYvB,IAAI,CAAC,UAAD,CAAhB,EAA8B,CAA9B,CAAV;AAEA,SAAO,SAASS,EAAT,CAAYe,IAAZ,EAAkBC,IAAlB,EAAwB;AAC3B,QAAIC,kBAAkB,GAAGJ,UAAU,CAACK,MAApC;AAAA,QACIf,MAAM,GAAG,CADb;AAAA,QAEIgB,CAAC,GAAG,CAFR;AAIA;;;;AAGA,WAAMhB,MAAM,KAAK,CAAX,IAAgBgB,CAAC,GAAGF,kBAA1B,EAA8C;AAC1Cd,MAAAA,MAAM,GAAGb,IAAI,CAACuB,UAAU,CAACM,CAAD,CAAX,EAAgBzB,GAAhB,CAAJ,CAAyBqB,IAAzB,EAA+BC,IAA/B,CAAT;AACAG,MAAAA,CAAC;AACJ;;AACD,WAAOhB,MAAP;AACH,GAbD;AAcH,CApBD;AAsBA;;;;;;AAIAiB,MAAM,CAACC,OAAP,GAAiBhC,MAAjB","sourcesContent":["var objectPath = require('object-path');\nvar sortBy;\nvar sort;\nvar type;\n\n/**\n * Filters args based on their type\n * @param  {String} type Type of property to filter by\n * @return {Function}\n */\ntype = function(type) {\n    return function(arg) {\n        return typeof arg === type;\n    };\n};\n\n/**\n * Return a comparator function\n * @param  {String} property The key to sort by\n * @param  {Function} map Function to apply to each property\n * @return {Function}        Returns the comparator function\n */\nsort = function sort(property, map) {\n    var sortOrder = 1;\n    var apply = map || function(_, value) { return value };\n\n    if (property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n    }\n\n    return function fn(a,b) {\n        var result;\n        var am = apply(property, objectPath.get(a, property));\n        var bm = apply(property, objectPath.get(b, property));\n        if (am < bm) result = -1;\n        if (am > bm) result = 1;\n        if (am === bm) result = 0;\n        return result * sortOrder;\n    }\n};\n\n/**\n * Return a comparator function that sorts by multiple keys\n * @return {Function} Returns the comparator function\n */\nsortBy = function sortBy() {\n\n    var args = Array.prototype.slice.call(arguments);\n    var properties = args.filter(type('string'));\n    var map = args.filter(type('function'))[0];\n\n    return function fn(obj1, obj2) {\n        var numberOfProperties = properties.length,\n            result = 0,\n            i = 0;\n\n        /* try getting a different result from 0 (equal)\n         * as long as we have extra properties to compare\n         */\n        while(result === 0 && i < numberOfProperties) {\n            result = sort(properties[i], map)(obj1, obj2);\n            i++;\n        }\n        return result;\n    };\n};\n\n/**\n * Expose `sortBy`\n * @type {Function}\n */\nmodule.exports = sortBy;"]},"metadata":{},"sourceType":"script"}