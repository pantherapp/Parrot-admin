{"ast":null,"code":"import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\n\nvar useInitializeFormWithRecord = function useInitializeFormWithRecord(record) {\n  var form = useForm();\n  useEffect(function () {\n    if (!record) {\n      return;\n    }\n\n    var registeredFields = form.getRegisteredFields(); // react-final-form does not provide a way to set multiple values in one call.\n    // Using batch ensure we don't get rerenders until all our values are set\n\n    form.batch(function () {\n      Object.keys(record).forEach(function (key) {\n        // We have to check the record key is actually registered as a field\n        // as some record keys may not have a matching input\n        if (registeredFields.some(function (field) {\n          return field === key;\n        })) {\n          form.change(key, record[key]);\n          form.resetFieldState(key);\n        }\n      });\n    });\n  }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useInitializeFormWithRecord;","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/node_modules/ra-core/esm/form/useInitializeFormWithRecord.js"],"names":["useEffect","useForm","useInitializeFormWithRecord","record","form","registeredFields","getRegisteredFields","batch","Object","keys","forEach","key","some","field","change","resetFieldState","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA;;;;AAGA,IAAIC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAUC,MAAV,EAAkB;AAChD,MAAIC,IAAI,GAAGH,OAAO,EAAlB;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACG,MAAL,EAAa;AACT;AACH;;AACD,QAAIE,gBAAgB,GAAGD,IAAI,CAACE,mBAAL,EAAvB,CAJkB,CAKlB;AACA;;AACAF,IAAAA,IAAI,CAACG,KAAL,CAAW,YAAY;AACnBC,MAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACvC;AACA;AACA,YAAIN,gBAAgB,CAACO,IAAjB,CAAsB,UAAUC,KAAV,EAAiB;AAAE,iBAAOA,KAAK,KAAKF,GAAjB;AAAuB,SAAhE,CAAJ,EAAuE;AACnEP,UAAAA,IAAI,CAACU,MAAL,CAAYH,GAAZ,EAAiBR,MAAM,CAACQ,GAAD,CAAvB;AACAP,UAAAA,IAAI,CAACW,eAAL,CAAqBJ,GAArB;AACH;AACJ,OAPD;AAQH,KATD;AAUH,GAjBQ,EAiBN,CAACP,IAAD,EAAOY,IAAI,CAACC,SAAL,CAAed,MAAf,CAAP,CAjBM,CAAT,CAFgD,CAmBZ;AACvC,CApBD;;AAqBA,eAAeD,2BAAf","sourcesContent":["import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\nvar useInitializeFormWithRecord = function (record) {\n    var form = useForm();\n    useEffect(function () {\n        if (!record) {\n            return;\n        }\n        var registeredFields = form.getRegisteredFields();\n        // react-final-form does not provide a way to set multiple values in one call.\n        // Using batch ensure we don't get rerenders until all our values are set\n        form.batch(function () {\n            Object.keys(record).forEach(function (key) {\n                // We have to check the record key is actually registered as a field\n                // as some record keys may not have a matching input\n                if (registeredFields.some(function (field) { return field === key; })) {\n                    form.change(key, record[key]);\n                    form.resetFieldState(key);\n                }\n            });\n        });\n    }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\nexport default useInitializeFormWithRecord;\n"]},"metadata":{},"sourceType":"module"}