{"ast":null,"code":"var _jsxFileName = \"/Users/yrm/Sites/parrot/src/components/CommentField.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField } from 'react-admin';\nimport { useDataProvider, Loading, Error } from 'react-admin';\n\nconst CommentField = ({\n  record\n}) => {\n  const dataProvider = useDataProvider();\n  const [total, setTotal] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    dataProvider.getList('comments', {\n      pagination: {\n        page: 1,\n        perPage: 100000\n      },\n      sort: {},\n      filter: {\n        voice_doc_id: record.id\n      }\n    }).then(({\n      data,\n      total\n    }) => {\n      setTotal(total);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  var comments = {\n    result: total + \"  Comments\"\n  };\n  if (loading) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  });\n  if (error) return /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }\n  });\n  if (!total) return /*#__PURE__*/React.createElement(TextField, {\n    record: comments,\n    source: \"result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 24\n    }\n  });\n  return /*#__PURE__*/React.createElement(TextField, {\n    record: comments,\n    source: \"result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default CommentField;","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/src/components/CommentField.js"],"names":["React","useState","useEffect","TextField","useDataProvider","Loading","Error","CommentField","record","dataProvider","total","setTotal","loading","setLoading","error","setError","getList","pagination","page","perPage","sort","filter","voice_doc_id","id","then","data","catch","comments","result"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,SADF,QAEO,aAFP;AAGA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,KAAnC,QAAgD,aAAhD;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACjC,QAAMC,YAAY,GAAGL,eAAe,EAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,EAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY,CAACO,OAAb,CAAqB,UAArB,EAAiC;AAAEC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAYC,QAAAA,OAAO,EAAE;AAArB,OAAd;AAA6CC,MAAAA,IAAI,EAAE,EAAnD;AAAuDC,MAAAA,MAAM,EAAE;AAACC,QAAAA,YAAY,EAAEd,MAAM,CAACe;AAAtB;AAA/D,KAAjC,EACKC,IADL,CACU,CAAC;AAAEC,MAAAA,IAAF;AAAQf,MAAAA;AAAR,KAAD,KAAqB;AACvBC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJL,EAKKa,KALL,CAKWZ,KAAK,IAAI;AACZC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARL;AASH,GAVQ,EAUN,EAVM,CAAT;AAYA,MAAIc,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAElB,KAAK,GAAG;AADH,GAAf;AAIA,MAAIE,OAAJ,EAAa,oBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIE,KAAJ,EAAW,oBAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAI,CAACJ,KAAL,EAAY,oBAAO,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEiB,QAAnB;AAA6B,IAAA,MAAM,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEZ,sBACE,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEA,QAAnB;AAA6B,IAAA,MAAM,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CA5BH;;AA8BE,eAAepB,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  TextField\n} from 'react-admin';\nimport { useDataProvider, Loading, Error } from 'react-admin';\n\nconst CommentField = ({ record }) => {\n    const dataProvider = useDataProvider();\n    const [total, setTotal] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n    useEffect(() => {\n        dataProvider.getList('comments', { pagination: { page: 1 , perPage: 100000 }, sort: {}, filter: {voice_doc_id: record.id} })\n            .then(({ data, total }) => {\n                setTotal(total);                \n                setLoading(false);\n            })\n            .catch(error => {\n                setError(error);\n                setLoading(false);\n            })\n    }, []);\n    \n    var comments = {\n      result: total + \"  Comments\"\n    }\n  \n    if (loading) return <Loading />;\n    if (error) return <Error />;\n    if (!total) return <TextField record={comments} source=\"result\" />;\n  \n    return (\n      <TextField record={comments} source=\"result\" />\n    )\n  };\n\n  export default CommentField;"]},"metadata":{},"sourceType":"module"}