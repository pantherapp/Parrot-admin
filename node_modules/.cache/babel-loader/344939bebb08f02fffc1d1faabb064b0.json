{"ast":null,"code":"var _jsxFileName = \"/Users/yrm/Sites/parrot/src/models/Voice.js\";\nimport React, { useState, useEffect } from 'react';\nimport { List, Datagrid, TextField, EditButton } from 'react-admin';\nimport { useDataProvider, Loading, Error } from 'react-admin';\n\nconst Comment = ({\n  voiceId\n}) => {\n  const dataProvider = useDataProvider();\n  const [total, setTotal] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    dataProvider.getList('comments', {\n      pagination: {\n        page: 1,\n        perPage: 100000\n      },\n      filter: {\n        id: voiceId\n      }\n    }).then(({\n      data,\n      total\n    }) => {\n      console.log(data);\n      setTotal(total);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 23\n    }\n  });\n  if (error) return /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  });\n  if (!total) return 0;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, total, \" comments\");\n};\n\nconst ConditionBooleanField = ({\n  record,\n  ...rest\n}) => {\n  return record.report_users ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, \"Reported by user\") : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"No Report\");\n};\n\nexport const VoiceList = props => /*#__PURE__*/React.createElement(List, Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }\n}), /*#__PURE__*/React.createElement(Datagrid, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(TextField, {\n  label: \"Location\",\n  source: \"address\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(ConditionBooleanField, {\n  source: \"report_users\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Comment, {\n  label: \"Comments\",\n  source: \"id\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }\n})));","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/src/models/Voice.js"],"names":["React","useState","useEffect","List","Datagrid","TextField","EditButton","useDataProvider","Loading","Error","Comment","voiceId","dataProvider","total","setTotal","loading","setLoading","error","setError","getList","pagination","page","perPage","filter","id","then","data","console","log","catch","ConditionBooleanField","record","rest","report_users","VoiceList","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,UAJF,QAKO,aALP;AAMA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,KAAnC,QAAgD,aAAhD;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC7B,QAAMC,YAAY,GAAGL,eAAe,EAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,EAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,YAAY,CAACO,OAAb,CAAqB,UAArB,EAAiC;AAAEC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAYC,QAAAA,OAAO,EAAE;AAArB,OAAd;AAA6CC,MAAAA,MAAM,EAAE;AAACC,QAAAA,EAAE,EAAEb;AAAL;AAArD,KAAjC,EACKc,IADL,CACU,CAAC;AAAEC,MAAAA,IAAF;AAAQb,MAAAA;AAAR,KAAD,KAAqB;AACvBc,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAZ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KALL,EAMKa,KANL,CAMWZ,KAAK,IAAI;AACdU,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACEC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAVL;AAWH,GAZQ,EAYN,EAZM,CAAT;AAeF,MAAID,OAAJ,EAAa,oBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIE,KAAJ,EAAW,oBAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,MAAI,CAACJ,KAAL,EAAY,OAAO,CAAP;AAEZ,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,KAAP,cADF;AAGD,CA3BD;;AA6BA,MAAMiB,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAU,KAAGC;AAAb,CAAD,KAAyB;AACnD,SAAOD,MAAM,CAACE,YAAP,gBACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADC,gBAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFN;AAGH,CAJD;;AAMA,OAAO,MAAMC,SAAS,GAAGC,KAAK,iBAC5B,oBAAC,IAAD,oBAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,SAAD;AAAW,EAAA,KAAK,EAAC,UAAjB;AAA4B,EAAA,MAAM,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,qBAAD;AAAuB,EAAA,MAAM,EAAC,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,eAGE,oBAAC,OAAD;AAAS,EAAA,KAAK,EAAC,UAAf;AAA0B,EAAA,MAAM,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF,CADK","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  List,\n  Datagrid,\n  TextField,\n  EditButton\n} from 'react-admin';\nimport { useDataProvider, Loading, Error } from 'react-admin';\n\nconst Comment = ({ voiceId }) => {\n    const dataProvider = useDataProvider();\n    const [total, setTotal] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n    useEffect(() => {\n        dataProvider.getList('comments', { pagination: { page: 1 , perPage: 100000 }, filter: {id: voiceId} })\n            .then(({ data, total }) => {\n                console.log(data);\n                setTotal(total);                \n                setLoading(false);\n            })\n            .catch(error => {\n              console.log(error);\n                setError(error);\n                setLoading(false);\n            })\n    }, []);\n\n  \n  if (loading) return <Loading />;\n  if (error) return <Error />;\n  if (!total) return 0;\n\n  return (\n    <span>{total} comments</span>\n  )\n};\n\nconst ConditionBooleanField = ({ record, ...rest }) => {\n    return record.report_users\n        ? <span>Reported by user</span>\n        : <span>No Report</span>;\n}\n\nexport const VoiceList = props => (\n  <List {...props}>\n    <Datagrid>\n      <TextField label=\"Location\" source=\"address\" />\n      <ConditionBooleanField source=\"report_users\" />\n      <Comment label=\"Comments\" source=\"id\" />\n    </Datagrid>\n  </List>\n);"]},"metadata":{},"sourceType":"module"}