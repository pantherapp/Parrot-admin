{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport sortBy from 'sort-by';\nimport { CREATE } from 'react-admin';\n\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file.rawFile);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = reject;\n});\n\nconst addUploadFeature = requestHandler => (type, resource, params) => {\n  if (type === 'UPDATE') {\n    if (params.data.image && params.data.image.length) {\n      const formerPictures = params.data.image.filter(p => !(p.rawFile instanceof File));\n      const newPictures = params.data.image.filter(p => p.rawFile instanceof File);\n      return Promise.all(newPictures.map(convertFileToBase64)).then(base64Pictures => base64Pictures.map(picture64 => ({\n        src: picture64,\n        title: `${params.data.title}`\n      }))).then(transformedNewPictures => requestHandler(type, resource, { ...params,\n        data: { ...params.data,\n          image: [...transformedNewPictures, ...formerPictures]\n        }\n      }));\n    }\n  } // for other request types and reources, fall back to the defautl request handler\n\n\n  return requestHandler(type, resource, params);\n};\n\nconst getImageSize = file => {\n  return new Promise(resolve => {\n    const img = document.createElement('img');\n\n    img.onload = function () {\n      resolve({\n        width: this.width,\n        height: this.height\n      });\n    };\n\n    img.src = file.src;\n  });\n};\n\nconst upload = async (fieldName, submitedData, id, resourceName, resourcePath) => {\n  let file = submitedData[fieldName];\n\n  if (!file) {\n    return false;\n  }\n\n  file = Array.isArray(file) ? file[0] : file;\n  const rawFile = file.rawFile;\n  const result = {};\n\n  if (file && rawFile && rawFile.name) {\n    const ref = firebase.storage().ref().child(`${resourcePath}/${id}/${fieldName}`);\n    const snapshot = await ref.put(rawFile);\n    const downloadURL = await snapshot.ref.getDownloadURL();\n    result[fieldName] = [{}];\n    result[fieldName][0].uploadedAt = new Date();\n    result[fieldName][0].src = downloadURL;\n    result[fieldName][0].type = rawFile.type;\n    result[fieldName][0].name = rawFile.name;\n\n    if (rawFile.type.indexOf('image/') === 0) {\n      try {\n        const imageSize = await getImageSize(file);\n        result[fieldName][0].width = imageSize.width;\n        result[fieldName][0].height = imageSize.height;\n      } catch (e) {\n        console.error(`Failed to get image dimensions`);\n      }\n    }\n\n    return result;\n  }\n\n  return false;\n};\n\nconst save = async (id, data, previous, resourceName, resourcePath, firebaseSaveFilter, uploadResults, isNew, timestampFieldNames) => {\n  if (uploadResults) {\n    uploadResults.map(uploadResult => uploadResult ? Object.assign(data, uploadResult) : false);\n  }\n\n  if (isNew) {\n    Object.assign(data, {\n      [timestampFieldNames.createdAt]: new Date()\n    });\n  }\n\n  data = Object.assign(previous, {\n    [timestampFieldNames.updatedAt]: new Date()\n  }, data);\n\n  if (!data.id) {\n    data.id = id;\n  }\n\n  await firebase.firestore().doc(`${resourcePath}/${data.id}`).set(firebaseSaveFilter(data));\n  return {\n    data\n  };\n};\n\nconst del = async (id, resourceName, resourcePath, uploadFields) => {\n  if (uploadFields.length) {\n    uploadFields.map(fieldName => firebase.storage().ref().child(`${resourcePath}/${id}/${fieldName}`).delete());\n  }\n\n  await firebase.firestore().doc(`${resourcePath}/${id}`).delete();\n  return {\n    data: id\n  };\n};\n\nconst delMany = async (ids, resourceName, previousData) => {\n  await ids.map(id => firebase.firestore().doc(`${resourceName}/${id}`).delete());\n  return {\n    data: ids\n  };\n};\n\nconst getItemID = (params, type, resourceName, resourcePath, resourceData) => {\n  let itemId = params.data.id || params.id || params.data.key || params.key;\n\n  if (!itemId) {\n    itemId = firebase.firestore().collection(resourcePath).doc().id;\n  }\n\n  if (!itemId) {\n    throw new Error('ID is required');\n  }\n\n  if (resourceData && resourceData[itemId] && type === CREATE) {\n    throw new Error('ID already in use');\n  }\n\n  return itemId;\n};\n\nconst getOne = async (params, resourceName, resourceData) => {\n  if (params.id) {\n    let result = await firebase.firestore().collection(resourceName).doc(params.id).get();\n\n    if (result.exists) {\n      const data = result.data();\n\n      if (data && data.id == null) {\n        data['id'] = result.id;\n      }\n\n      return {\n        data: data\n      };\n    } else {\n      throw new Error('Id not found');\n    }\n  } else {\n    throw new Error('Id not found');\n  }\n};\n/**\n * params example:\n * pagination: { page: 1, perPage: 5 },\n * sort: { field: 'title', order: 'ASC' },\n * filter: { author_id: 12 }\n */\n\n\nconst getList = async (params, resourceName, resourceData) => {\n  if (params.pagination) {\n    let values = [];\n    let snapshots = await firebase.firestore().collection(resourceName).get();\n\n    for (const snapshot of snapshots.docs) {\n      const data = snapshot.data();\n\n      if (data && data.id == null) {\n        data['id'] = snapshot.id;\n      }\n\n      values.push(data);\n    }\n\n    if (params.filter) {\n      values = values.filter(item => {\n        let meetsFilters = true;\n\n        for (const key of Object.keys(params.filter)) {\n          meetsFilters = item[key] === params.filter[key];\n        }\n\n        return meetsFilters;\n      });\n    }\n\n    if (params.sort) {\n      values.sort(sortBy(`${params.sort.order === 'ASC' ? '' : '-'}${params.sort.field}`));\n    }\n\n    const keys = values.map(i => i.id);\n    const {\n      page,\n      perPage\n    } = params.pagination;\n\n    const _start = (page - 1) * perPage;\n\n    const _end = page * perPage;\n\n    const data = values ? values.slice(_start, _end) : [];\n    const ids = keys.slice(_start, _end) || [];\n    const total = values ? values.length : 0;\n    return {\n      data,\n      ids,\n      total\n    };\n  } else {\n    throw new Error('Error processing request');\n  }\n};\n\nconst getMany = async (params, resourceName, resourceData) => {\n  let data = [];\n  /* eslint-disable no-await-in-loop */\n\n  for (const id of params.ids) {\n    let {\n      data: item\n    } = await getOne({\n      id\n    }, resourceName, resourceData);\n    data.push(item);\n  }\n\n  return {\n    data\n  };\n};\n\nconst getManyReference = async (params, resourceName, resourceData) => {\n  if (params.target) {\n    if (!params.filter) params.filter = {};\n    params.filter[params.target] = params.id;\n    let {\n      data,\n      total\n    } = await getList(params, resourceName, resourceData);\n    return {\n      data,\n      total\n    };\n  } else {\n    throw new Error('Error processing request');\n  }\n};\n\nexport default {\n  upload,\n  save,\n  del,\n  delMany,\n  getItemID,\n  getOne,\n  getList,\n  getMany,\n  getManyReference,\n  addUploadFeature,\n  convertFileToBase64\n};","map":{"version":3,"sources":["/Users/yrm/Sites/nudge/src/lib/methods.js"],"names":["firebase","sortBy","CREATE","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","rawFile","onload","result","onerror","addUploadFeature","requestHandler","type","resource","params","data","image","length","formerPictures","filter","p","File","newPictures","all","map","then","base64Pictures","picture64","src","title","transformedNewPictures","getImageSize","img","document","createElement","width","height","upload","fieldName","submitedData","id","resourceName","resourcePath","Array","isArray","name","ref","storage","child","snapshot","put","downloadURL","getDownloadURL","uploadedAt","Date","indexOf","imageSize","e","console","error","save","previous","firebaseSaveFilter","uploadResults","isNew","timestampFieldNames","uploadResult","Object","assign","createdAt","updatedAt","firestore","doc","set","del","uploadFields","delete","delMany","ids","previousData","getItemID","resourceData","itemId","key","collection","Error","getOne","get","exists","getList","pagination","values","snapshots","docs","push","item","meetsFilters","keys","sort","order","field","i","page","perPage","_start","_end","slice","total","getMany","getManyReference","target"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport sortBy from 'sort-by';\nimport { CREATE } from 'react-admin';\n\nconst convertFileToBase64 = file =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file.rawFile);\n\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n  });\n\nconst addUploadFeature = requestHandler => (type, resource, params) => {\n  if (type === 'UPDATE') {\n    if (params.data.image && params.data.image.length) {\n      const formerPictures = params.data.image.filter(p => !(p.rawFile instanceof File));\n      const newPictures = params.data.image.filter(p => p.rawFile instanceof File);\n\n      return Promise.all(newPictures.map(convertFileToBase64))\n        .then(base64Pictures =>\n          base64Pictures.map(picture64 => ({\n            src: picture64,\n            title: `${params.data.title}`\n          }))\n        )\n        .then(transformedNewPictures =>\n          requestHandler(type, resource, {\n            ...params,\n            data: {\n              ...params.data,\n              image: [...transformedNewPictures, ...formerPictures]\n            }\n          })\n        );\n    }\n  }\n  // for other request types and reources, fall back to the defautl request handler\n  return requestHandler(type, resource, params);\n};\n\nconst getImageSize = file => {\n  return new Promise(resolve => {\n    const img = document.createElement('img');\n    img.onload = function() {\n      resolve({\n        width: this.width,\n        height: this.height\n      });\n    };\n    img.src = file.src;\n  });\n};\n\nconst upload = async (fieldName, submitedData, id, resourceName, resourcePath) => {\n  let file = submitedData[fieldName];\n  if (!file) {\n    return false;\n  }\n  \n  file = Array.isArray(file) ? file[0] : file;\n  \n  const rawFile = file.rawFile;\n\n  const result = {};\n  if (file && rawFile && rawFile.name) {\n    const ref = firebase\n      .storage()\n      .ref()\n      .child(`${resourcePath}/${id}/${fieldName}`);\n    const snapshot = await ref.put(rawFile);\n    const downloadURL = await snapshot.ref.getDownloadURL();\n    result[fieldName] = [{}];\n    result[fieldName][0].uploadedAt = new Date();\n    result[fieldName][0].src = downloadURL;\n    result[fieldName][0].type = rawFile.type;\n    result[fieldName][0].name = rawFile.name;\n    if (rawFile.type.indexOf('image/') === 0) {\n      try {\n        const imageSize = await getImageSize(file);\n        result[fieldName][0].width = imageSize.width;\n        result[fieldName][0].height = imageSize.height;\n      } catch (e) {\n        console.error(`Failed to get image dimensions`);\n      }\n    }\n    return result;\n  }\n  return false;\n};\n\nconst save = async (\n  id,\n  data,\n  previous,\n  resourceName,\n  resourcePath,\n  firebaseSaveFilter,\n  uploadResults,\n  isNew,\n  timestampFieldNames\n) => {\n  if (uploadResults) {\n    uploadResults.map(uploadResult => (uploadResult ? Object.assign(data, uploadResult) : false));\n  }\n\n  if (isNew) {\n    Object.assign(data, { [timestampFieldNames.createdAt]: new Date() });\n  }\n\n  data = Object.assign(previous, { [timestampFieldNames.updatedAt]: new Date() }, data);\n\n  if (!data.id) {\n    data.id = id;\n  }\n\n  await firebase\n    .firestore()\n    .doc(`${resourcePath}/${data.id}`)\n    .set(firebaseSaveFilter(data));\n  return { data };\n};\n\nconst del = async (id, resourceName, resourcePath, uploadFields) => {\n  if (uploadFields.length) {\n    uploadFields.map(fieldName =>\n      firebase\n        .storage()\n        .ref()\n        .child(`${resourcePath}/${id}/${fieldName}`)\n        .delete()\n    );\n  }\n\n  await firebase\n    .firestore()\n    .doc(`${resourcePath}/${id}`)\n    .delete();\n  return { data: id };\n};\n\nconst delMany = async (ids, resourceName, previousData) => {\n  await ids.map(id =>\n    firebase\n      .firestore()\n      .doc(`${resourceName}/${id}`)\n      .delete()\n  );\n  return { data: ids };\n};\n\nconst getItemID = (params, type, resourceName, resourcePath, resourceData) => {\n  let itemId = params.data.id || params.id || params.data.key || params.key;\n  if (!itemId) {\n    itemId = firebase\n      .firestore()\n      .collection(resourcePath)\n      .doc().id;\n  }\n\n  if (!itemId) {\n    throw new Error('ID is required');\n  }\n\n  if (resourceData && resourceData[itemId] && type === CREATE) {\n    throw new Error('ID already in use');\n  }\n\n  return itemId;\n};\n\nconst getOne = async (params, resourceName, resourceData) => {\n  if (params.id) {\n    let result = await firebase\n      .firestore()\n      .collection(resourceName)\n      .doc(params.id)\n      .get();\n\n    if (result.exists) {\n      const data = result.data();\n\n      if (data && data.id == null) {\n        data['id'] = result.id;\n      }\n      return { data: data };\n    } else {\n      throw new Error('Id not found');\n    }\n  } else {\n    throw new Error('Id not found');\n  }\n};\n\n/**\n * params example:\n * pagination: { page: 1, perPage: 5 },\n * sort: { field: 'title', order: 'ASC' },\n * filter: { author_id: 12 }\n */\n\nconst getList = async (params, resourceName, resourceData) => {\n  if (params.pagination) {\n    let values = [];\n    let snapshots = await firebase\n      .firestore()\n      .collection(resourceName)\n      .get();\n\n    for (const snapshot of snapshots.docs) {\n      const data = snapshot.data();\n      if (data && data.id == null) {\n        data['id'] = snapshot.id;\n      }\n      values.push(data);\n    }\n\n    if (params.filter) {\n      values = values.filter(item => {\n        let meetsFilters = true;\n        for (const key of Object.keys(params.filter)) {\n          meetsFilters = item[key] === params.filter[key];\n        }\n        return meetsFilters;\n      });\n    }\n\n    if (params.sort) {\n      values.sort(sortBy(`${params.sort.order === 'ASC' ? '' : '-'}${params.sort.field}`));\n    }\n\n    const keys = values.map(i => i.id);\n    const { page, perPage } = params.pagination;\n    const _start = (page - 1) * perPage;\n    const _end = page * perPage;\n    const data = values ? values.slice(_start, _end) : [];\n    const ids = keys.slice(_start, _end) || [];\n    const total = values ? values.length : 0;\n    return { data, ids, total };\n  } else {\n    throw new Error('Error processing request');\n  }\n};\n\nconst getMany = async (params, resourceName, resourceData) => {\n  let data = [];\n  /* eslint-disable no-await-in-loop */\n  for (const id of params.ids) {\n    let { data: item } = await getOne({ id }, resourceName, resourceData);\n    data.push(item);\n  }\n  return { data };\n};\n\nconst getManyReference = async (params, resourceName, resourceData) => {\n  if (params.target) {\n    if (!params.filter) params.filter = {};\n    params.filter[params.target] = params.id;\n    let { data, total } = await getList(params, resourceName, resourceData);\n    return { data, total };\n  } else {\n    throw new Error('Error processing request');\n  }\n};\n\nexport default {\n  upload,\n  save,\n  del,\n  delMany,\n  getItemID,\n  getOne,\n  getList,\n  getMany,\n  getManyReference,\n  addUploadFeature,\n  convertFileToBase64\n};"]},"metadata":{},"sourceType":"module"}