{"ast":null,"code":"import { useCallback } from 'react';\nimport inflection from 'inflection';\nimport useVersion from './useVersion';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useNotify, useRedirect, useRefresh } from '../sideEffect';\nimport { useGetOne, useUpdate } from '../dataProvider';\nimport { useTranslate } from '../i18n';\nimport { CRUD_GET_ONE, CRUD_UPDATE } from '../actions';\n/**\n * Prepare data for the Edit view\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = props => {\n *     const controllerProps = useEditController(props);\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\n\nvar useEditController = function (props) {\n  useCheckMinimumRequiredProps('Edit', ['basePath', 'resource'], props);\n  var basePath = props.basePath,\n      id = props.id,\n      resource = props.resource,\n      successMessage = props.successMessage,\n      _a = props.undoable,\n      undoable = _a === void 0 ? true : _a;\n  var translate = useTranslate();\n  var notify = useNotify();\n  var redirect = useRedirect();\n  var refresh = useRefresh();\n  var version = useVersion();\n\n  var _b = useGetOne(resource, id, {\n    version: version,\n    action: CRUD_GET_ONE,\n    onFailure: function () {\n      notify('ra.notification.item_doesnt_exist', 'warning');\n      redirect('list', basePath);\n      refresh();\n    }\n  }),\n      record = _b.data,\n      loading = _b.loading,\n      loaded = _b.loaded;\n\n  var resourceName = translate(\"resources.\" + resource + \".name\", {\n    smart_count: 1,\n    _: inflection.humanize(inflection.singularize(resource))\n  });\n  var defaultTitle = translate('ra.page.edit', {\n    name: \"\" + resourceName,\n    id: id,\n    record: record\n  });\n\n  var _c = useUpdate(resource, id, {}, // set by the caller\n  record),\n      update = _c[0],\n      saving = _c[1].loading;\n\n  var save = useCallback(function (data, redirectTo, _a) {\n    if (redirectTo === void 0) {\n      redirectTo = DefaultRedirect;\n    }\n\n    var _b = _a === void 0 ? {} : _a,\n        onSuccess = _b.onSuccess,\n        onFailure = _b.onFailure;\n\n    return update({\n      payload: {\n        data: data\n      }\n    }, {\n      action: CRUD_UPDATE,\n      onSuccess: onSuccess ? onSuccess : function () {\n        notify(successMessage || 'ra.notification.updated', 'info', {\n          smart_count: 1\n        }, undoable);\n        redirect(redirectTo, basePath, data.id, data);\n      },\n      onFailure: onFailure ? onFailure : function (error) {\n        notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', 'warning');\n\n        if (undoable) {\n          refresh();\n        }\n      },\n      undoable: undoable\n    });\n  }, [update, undoable, notify, successMessage, redirect, basePath, refresh]);\n  return {\n    loading: loading,\n    loaded: loaded,\n    saving: saving,\n    defaultTitle: defaultTitle,\n    save: save,\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    redirect: DefaultRedirect,\n    version: version\n  };\n};\n\nexport default useEditController;\nvar DefaultRedirect = 'list';","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/node_modules/ra-core/esm/controller/useEditController.js"],"names":["useCallback","inflection","useVersion","useCheckMinimumRequiredProps","useNotify","useRedirect","useRefresh","useGetOne","useUpdate","useTranslate","CRUD_GET_ONE","CRUD_UPDATE","useEditController","props","basePath","id","resource","successMessage","_a","undoable","translate","notify","redirect","refresh","version","_b","action","onFailure","record","data","loading","loaded","resourceName","smart_count","_","humanize","singularize","defaultTitle","name","_c","update","saving","save","redirectTo","DefaultRedirect","onSuccess","payload","error","message"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\nimport inflection from 'inflection';\nimport useVersion from './useVersion';\nimport { useCheckMinimumRequiredProps } from './checkMinimumRequiredProps';\nimport { useNotify, useRedirect, useRefresh, } from '../sideEffect';\nimport { useGetOne, useUpdate } from '../dataProvider';\nimport { useTranslate } from '../i18n';\nimport { CRUD_GET_ONE, CRUD_UPDATE } from '../actions';\n/**\n * Prepare data for the Edit view\n *\n * @param {Object} props The props passed to the Edit component.\n *\n * @return {Object} controllerProps Fetched data and callbacks for the Edit view\n *\n * @example\n *\n * import { useEditController } from 'react-admin';\n * import EditView from './EditView';\n *\n * const MyEdit = props => {\n *     const controllerProps = useEditController(props);\n *     return <EditView {...controllerProps} {...props} />;\n * }\n */\nvar useEditController = function (props) {\n    useCheckMinimumRequiredProps('Edit', ['basePath', 'resource'], props);\n    var basePath = props.basePath, id = props.id, resource = props.resource, successMessage = props.successMessage, _a = props.undoable, undoable = _a === void 0 ? true : _a;\n    var translate = useTranslate();\n    var notify = useNotify();\n    var redirect = useRedirect();\n    var refresh = useRefresh();\n    var version = useVersion();\n    var _b = useGetOne(resource, id, {\n        version: version,\n        action: CRUD_GET_ONE,\n        onFailure: function () {\n            notify('ra.notification.item_doesnt_exist', 'warning');\n            redirect('list', basePath);\n            refresh();\n        },\n    }), record = _b.data, loading = _b.loading, loaded = _b.loaded;\n    var resourceName = translate(\"resources.\" + resource + \".name\", {\n        smart_count: 1,\n        _: inflection.humanize(inflection.singularize(resource)),\n    });\n    var defaultTitle = translate('ra.page.edit', {\n        name: \"\" + resourceName,\n        id: id,\n        record: record,\n    });\n    var _c = useUpdate(resource, id, {}, // set by the caller\n    record), update = _c[0], saving = _c[1].loading;\n    var save = useCallback(function (data, redirectTo, _a) {\n        if (redirectTo === void 0) { redirectTo = DefaultRedirect; }\n        var _b = _a === void 0 ? {} : _a, onSuccess = _b.onSuccess, onFailure = _b.onFailure;\n        return update({ payload: { data: data } }, {\n            action: CRUD_UPDATE,\n            onSuccess: onSuccess\n                ? onSuccess\n                : function () {\n                    notify(successMessage || 'ra.notification.updated', 'info', {\n                        smart_count: 1,\n                    }, undoable);\n                    redirect(redirectTo, basePath, data.id, data);\n                },\n            onFailure: onFailure\n                ? onFailure\n                : function (error) {\n                    notify(typeof error === 'string'\n                        ? error\n                        : error.message ||\n                            'ra.notification.http_error', 'warning');\n                    if (undoable) {\n                        refresh();\n                    }\n                },\n            undoable: undoable,\n        });\n    }, [update, undoable, notify, successMessage, redirect, basePath, refresh]);\n    return {\n        loading: loading,\n        loaded: loaded,\n        saving: saving,\n        defaultTitle: defaultTitle,\n        save: save,\n        resource: resource,\n        basePath: basePath,\n        record: record,\n        redirect: DefaultRedirect,\n        version: version,\n    };\n};\nexport default useEditController;\nvar DefaultRedirect = 'list';\n"]},"metadata":{},"sourceType":"module"}