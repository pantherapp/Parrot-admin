{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../sideEffect';\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfaccessDenied(error);\n *                  notify('server error', 'warning');\n *              })\n *     }, []);\n *     // ...\n * }\n */\n\nvar useLogoutIfAccessDenied = function useLogoutIfAccessDenied() {\n  var authProvider = useAuthProvider();\n  var logout = useLogout();\n  var notify = useNotify();\n  var logoutIfAccessDenied = useCallback(function (error) {\n    return authProvider.checkError(error).then(function () {\n      return false;\n    }).catch(function (e) {\n      var redirectTo = e && e.redirectTo ? e.redirectTo : error && error.redirectTo ? error.redirectto : undefined;\n      logout({}, redirectTo);\n      notify('ra.notification.logged_out', 'warning');\n      return true;\n    });\n  }, [authProvider, logout, notify]);\n  return authProvider ? logoutIfAccessDenied : logoutIfAccessDeniedWithoutProvider;\n};\n\nvar logoutIfAccessDeniedWithoutProvider = function logoutIfAccessDeniedWithoutProvider() {\n  return Promise.resolve(false);\n};\n\nexport default useLogoutIfAccessDenied;","map":{"version":3,"sources":["/Users/yrm/Sites/nudge/node_modules/ra-core/esm/auth/useLogoutIfAccessDenied.js"],"names":["useCallback","useAuthProvider","useLogout","useNotify","useLogoutIfAccessDenied","authProvider","logout","notify","logoutIfAccessDenied","error","checkError","then","catch","e","redirectTo","redirectto","undefined","logoutIfAccessDeniedWithoutProvider","Promise","resolve"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAIC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAY;AACtC,MAAIC,YAAY,GAAGJ,eAAe,EAAlC;AACA,MAAIK,MAAM,GAAGJ,SAAS,EAAtB;AACA,MAAIK,MAAM,GAAGJ,SAAS,EAAtB;AACA,MAAIK,oBAAoB,GAAGR,WAAW,CAAC,UAAUS,KAAV,EAAiB;AACpD,WAAOJ,YAAY,CACdK,UADE,CACSD,KADT,EAEFE,IAFE,CAEG,YAAY;AAAE,aAAO,KAAP;AAAe,KAFhC,EAGFC,KAHE,CAGI,UAAUC,CAAV,EAAa;AACpB,UAAIC,UAAU,GAAGD,CAAC,IAAIA,CAAC,CAACC,UAAP,GACXD,CAAC,CAACC,UADS,GAEXL,KAAK,IAAIA,KAAK,CAACK,UAAf,GACIL,KAAK,CAACM,UADV,GAEIC,SAJV;AAKAV,MAAAA,MAAM,CAAC,EAAD,EAAKQ,UAAL,CAAN;AACAP,MAAAA,MAAM,CAAC,4BAAD,EAA+B,SAA/B,CAAN;AACA,aAAO,IAAP;AACH,KAZM,CAAP;AAaH,GAdqC,EAcnC,CAACF,YAAD,EAAeC,MAAf,EAAuBC,MAAvB,CAdmC,CAAtC;AAeA,SAAOF,YAAY,GACbG,oBADa,GAEbS,mCAFN;AAGH,CAtBD;;AAuBA,IAAIA,mCAAmC,GAAG,SAAtCA,mCAAsC,GAAY;AAAE,SAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AAAgC,CAAxF;;AACA,eAAef,uBAAf","sourcesContent":["import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport useLogout from './useLogout';\nimport { useNotify } from '../sideEffect';\n/**\n * Returns a callback used to call the authProvider.checkError() method\n * and an error from the dataProvider. If the authProvider rejects the call,\n * the hook logs the user out and shows a logged out notification.\n *\n * Used in the useDataProvider hook to check for access denied responses\n * (e.g. 401 or 403 responses) and trigger a logout.\n *\n * @see useLogout\n * @see useDataProvider\n *\n * @returns {Function} logoutIfAccessDenied callback\n *\n * @example\n *\n * import { useLogoutIfAccessDenied, useNotify, DataProviderContext } from 'react-admin';\n *\n * const FetchRestrictedResource = () => {\n *     const dataProvider = useContext(DataProviderContext);\n *     const logoutIfAccessDenied = useLogoutIfAccessDenied();\n *     const notify = useNotify()\n *     useEffect(() => {\n *         dataProvider.getOne('secret', { id: 123 })\n *             .catch(error => {\n *                  logoutIfaccessDenied(error);\n *                  notify('server error', 'warning');\n *              })\n *     }, []);\n *     // ...\n * }\n */\nvar useLogoutIfAccessDenied = function () {\n    var authProvider = useAuthProvider();\n    var logout = useLogout();\n    var notify = useNotify();\n    var logoutIfAccessDenied = useCallback(function (error) {\n        return authProvider\n            .checkError(error)\n            .then(function () { return false; })\n            .catch(function (e) {\n            var redirectTo = e && e.redirectTo\n                ? e.redirectTo\n                : error && error.redirectTo\n                    ? error.redirectto\n                    : undefined;\n            logout({}, redirectTo);\n            notify('ra.notification.logged_out', 'warning');\n            return true;\n        });\n    }, [authProvider, logout, notify]);\n    return authProvider\n        ? logoutIfAccessDenied\n        : logoutIfAccessDeniedWithoutProvider;\n};\nvar logoutIfAccessDeniedWithoutProvider = function () { return Promise.resolve(false); };\nexport default useLogoutIfAccessDenied;\n"]},"metadata":{},"sourceType":"module"}