{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useReferenceArrayFieldController } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\n\nvar ReferenceArrayField = function ReferenceArrayField(props) {\n  var children = props.children,\n      basePath = props.basePath,\n      reference = props.reference,\n      resource = props.resource,\n      record = props.record,\n      source = props.source;\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n\n  return React.createElement(PureReferenceArrayFieldView, __assign({}, props, useReferenceArrayFieldController({\n    basePath: basePath,\n    reference: reference,\n    resource: resource,\n    record: record,\n    source: source\n  })), children);\n};\n\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired\n});\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    progress: {\n      marginTop: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaReferenceArrayField'\n});\nexport var ReferenceArrayFieldView = function ReferenceArrayFieldView(props) {\n  var children = props.children,\n      className = props.className,\n      data = props.data,\n      ids = props.ids,\n      loaded = props.loaded,\n      reference = props.reference,\n      referenceBasePath = props.referenceBasePath;\n  var classes = useStyles(props);\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n\n  return cloneElement(Children.only(children), {\n    className: className,\n    resource: reference,\n    ids: ids,\n    data: data,\n    loaded: loaded,\n    basePath: referenceBasePath,\n    currentSort: {}\n  });\n};\nReferenceArrayFieldView.propTypes = {\n  classes: PropTypes.any,\n  className: PropTypes.string,\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired,\n  referenceBasePath: PropTypes.string\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/node_modules/react-admin/node_modules/ra-ui-materialui/esm/field/ReferenceArrayField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","Children","cloneElement","memo","PropTypes","LinearProgress","makeStyles","useReferenceArrayFieldController","fieldPropTypes","ReferenceArrayField","props","children","basePath","reference","resource","record","source","count","Error","createElement","PureReferenceArrayFieldView","propTypes","addLabel","bool","string","classes","object","className","element","isRequired","label","any","sortBy","defaultProps","useStyles","theme","progress","marginTop","spacing","name","ReferenceArrayFieldView","data","ids","loaded","referenceBasePath","only","currentSort","array"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useReferenceArrayFieldController } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\nvar ReferenceArrayField = function (props) {\n    var children = props.children, basePath = props.basePath, reference = props.reference, resource = props.resource, record = props.record, source = props.source;\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n    }\n    return (React.createElement(PureReferenceArrayFieldView, __assign({}, props, useReferenceArrayFieldController({\n        basePath: basePath,\n        reference: reference,\n        resource: resource,\n        record: record,\n        source: source,\n    })), children));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { addLabel: PropTypes.bool, basePath: PropTypes.string, classes: PropTypes.object, className: PropTypes.string, children: PropTypes.element.isRequired, label: PropTypes.string, record: PropTypes.any, reference: PropTypes.string.isRequired, resource: PropTypes.string, sortBy: PropTypes.string, source: PropTypes.string.isRequired });\nReferenceArrayField.defaultProps = {\n    addLabel: true,\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    progress: { marginTop: theme.spacing(2) },\n}); }, { name: 'RaReferenceArrayField' });\nexport var ReferenceArrayFieldView = function (props) {\n    var children = props.children, className = props.className, data = props.data, ids = props.ids, loaded = props.loaded, reference = props.reference, referenceBasePath = props.referenceBasePath;\n    var classes = useStyles(props);\n    if (!loaded) {\n        return React.createElement(LinearProgress, { className: classes.progress });\n    }\n    return cloneElement(Children.only(children), {\n        className: className,\n        resource: reference,\n        ids: ids,\n        data: data,\n        loaded: loaded,\n        basePath: referenceBasePath,\n        currentSort: {},\n    });\n};\nReferenceArrayFieldView.propTypes = {\n    classes: PropTypes.any,\n    className: PropTypes.string,\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    loaded: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n    reference: PropTypes.string.isRequired,\n    referenceBasePath: PropTypes.string,\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;\n"]},"metadata":{},"sourceType":"module"}