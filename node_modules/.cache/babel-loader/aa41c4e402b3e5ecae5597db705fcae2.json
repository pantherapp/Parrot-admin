{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport { useChoices } from 'ra-core';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property an the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\n\nexport var SelectField = function SelectField(_a) {\n  var className = _a.className,\n      emptyText = _a.emptyText,\n      source = _a.source,\n      record = _a.record,\n      choices = _a.choices,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      translateChoice = _a.translateChoice,\n      rest = __rest(_a, [\"className\", \"emptyText\", \"source\", \"record\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n\n  var value = get(record, source);\n\n  var _b = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _b.getChoiceText,\n      getChoiceValue = _b.getChoiceValue;\n\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeRestProps(rest)), emptyText) : null;\n  }\n\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeRestProps(rest)), choiceText);\n};\nSelectField.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nvar EnhancedSelectField = pure(SelectField);\nEnhancedSelectField.defaultProps = {\n  addLabel: true\n};\nEnhancedSelectField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nEnhancedSelectField.displayName = 'EnhancedSelectField';\nexport default EnhancedSelectField;","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/node_modules/ra-ui-materialui/esm/field/SelectField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","PropTypes","get","pure","useChoices","Typography","sanitizeRestProps","fieldPropTypes","SelectField","_a","className","emptyText","source","record","choices","optionValue","optionText","translateChoice","rest","value","_b","getChoiceText","getChoiceValue","choice","find","createElement","component","variant","choiceText","defaultProps","EnhancedSelectField","addLabel","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","displayName"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport { useChoices } from 'ra-core';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property an the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nexport var SelectField = function (_a) {\n    var className = _a.className, emptyText = _a.emptyText, source = _a.source, record = _a.record, choices = _a.choices, optionValue = _a.optionValue, optionText = _a.optionText, translateChoice = _a.translateChoice, rest = __rest(_a, [\"className\", \"emptyText\", \"source\", \"record\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n    var value = get(record, source);\n    var _b = useChoices({\n        optionText: optionText,\n        optionValue: optionValue,\n        translateChoice: translateChoice,\n    }), getChoiceText = _b.getChoiceText, getChoiceValue = _b.getChoiceValue;\n    var choice = choices.find(function (choice) { return getChoiceValue(choice) === value; });\n    if (!choice) {\n        return emptyText ? (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeRestProps(rest)), emptyText)) : null;\n    }\n    var choiceText = getChoiceText(choice);\n    return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body2\", className: className }, sanitizeRestProps(rest)), choiceText));\n};\nSelectField.defaultProps = {\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\nvar EnhancedSelectField = pure(SelectField);\nEnhancedSelectField.defaultProps = {\n    addLabel: true,\n};\nEnhancedSelectField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), { choices: PropTypes.arrayOf(PropTypes.object).isRequired, optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]), optionValue: PropTypes.string, translateChoice: PropTypes.bool });\nEnhancedSelectField.displayName = 'EnhancedSelectField';\nexport default EnhancedSelectField;\n"]},"metadata":{},"sourceType":"module"}