{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Methods from './methods';\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE, DELETE_MANY } from 'react-admin';\n/**\n * @param {string[]|Object[]} trackedResources Array of resource names or array of Objects containing name and\n * optional path properties (path defaults to name)\n * @param {Object} firebaseConfig Options Firebase configuration\n */\n\nconst BaseConfiguration = {\n  initialQuerytimeout: 10000,\n  timestampFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n  }\n};\n\nconst RestProvider = (firebaseConfig = {}, options = {}) => {\n  options = Object.assign({}, BaseConfiguration, options);\n  const {\n    timestampFieldNames,\n    trackedResources\n  } = options;\n  const resourcesStatus = {}; // const resourcesReferences = {};\n\n  const resourcesData = {};\n  const resourcesPaths = {};\n  const resourcesUploadFields = {};\n\n  if (firebase.apps.length === 0) {\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n  }\n  /* Functions */\n\n\n  const upload = options.upload || Methods.upload;\n  const save = options.save || Methods.save;\n  const del = options.del || Methods.del;\n  const getItemID = options.getItemID || Methods.getItemID;\n  const getOne = options.getOne || Methods.getOne;\n  const getMany = options.getMany || Methods.getMany;\n  const getManyReference = options.getManyReference || Methods.getManyReference;\n  const delMany = options.delMany || Methods.delMany;\n  const getList = options.getList || Methods.getList;\n  const firebaseSaveFilter = options.firebaseSaveFilter ? options.firebaseSaveFilter : data => data; // const firebaseGetFilter = options.firebaseGetFilter ? options.firebaseGetFilter : data => data;\n  // Sanitize Resources\n\n  trackedResources.map((resource, index) => {\n    if (typeof resource === Array) {\n      resource = {\n        name: resource['name'],\n        path: resource['path'] || resource['name'],\n        uploadFields: resource['uploadFields'] || []\n      };\n      trackedResources[index] = resource;\n    }\n\n    const {\n      name,\n      path,\n      uploadFields\n    } = resource;\n\n    if (!resource.name) {\n      throw new Error(`name is missing from resource ${resource}`);\n    }\n\n    resourcesUploadFields[name] = uploadFields || [];\n    resourcesPaths[name] = path || name;\n    resourcesData[name] = {};\n  });\n  /**\n   * @param {string} type Request type, e.g GET_LIST\n   * @param {string} resourceName Resource name, e.g. \"posts\"\n   * @param {Object} payload Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a REST response\n   */\n\n  return async (type, resourceName, params) => {\n    await resourcesStatus[resourceName];\n    let result = null;\n\n    switch (type) {\n      case GET_LIST:\n        // console.log(params);\n        result = await getList(params, resourceName, resourcesData[resourceName]);\n        return result;\n\n      case GET_MANY:\n        result = await getMany(params, resourceName, resourcesData[resourceName]); // console.log('GET_MANY');\n\n        return result;\n\n      case GET_MANY_REFERENCE:\n        // console.log('GET_MANY_REFERENCE');\n        result = await getManyReference(params, resourceName, resourcesData[resourceName]);\n        return result;\n\n      case GET_ONE:\n        // console.log('GET_ONE');\n        result = await getOne(params, resourceName, resourcesData[resourceName]);\n        return result;\n\n      case DELETE:\n        // console.log('DELETE');\n        const uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : [];\n        result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields);\n        return result;\n\n      case DELETE_MANY:\n        // console.log('DELETE_MANY');\n        result = await delMany(params.ids, resourceName, resourcesData[resourceName]);\n        return result;\n\n      case UPDATE:\n      case CREATE:\n        // console.log('UPDATE/CREATE');\n        let itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName]);\n        const uploads = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName].map(field => upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName])) : [];\n        const currentData = resourcesData[resourceName][itemId] || {};\n        const uploadResults = await Promise.all(uploads);\n        result = await save(itemId, params.data, currentData, resourceName, resourcesPaths[resourceName], firebaseSaveFilter, uploadResults, type === CREATE, timestampFieldNames);\n        return result;\n\n      default:\n        console.error('Undocumented method: ', type);\n        return {\n          data: []\n        };\n    }\n  };\n};\n\nexport default RestProvider;","map":{"version":3,"sources":["/Users/yrm/Sites/parrot/src/lib/RestProvider.js"],"names":["firebase","Methods","GET_LIST","GET_ONE","GET_MANY","GET_MANY_REFERENCE","CREATE","UPDATE","DELETE","DELETE_MANY","BaseConfiguration","initialQuerytimeout","timestampFieldNames","createdAt","updatedAt","RestProvider","firebaseConfig","options","Object","assign","trackedResources","resourcesStatus","resourcesData","resourcesPaths","resourcesUploadFields","apps","length","initializeApp","auth","setPersistence","Auth","Persistence","SESSION","upload","save","del","getItemID","getOne","getMany","getManyReference","delMany","getList","firebaseSaveFilter","data","map","resource","index","Array","name","path","uploadFields","Error","type","resourceName","params","result","id","ids","itemId","uploads","field","currentData","uploadResults","Promise","all","console","error"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Methods from './methods';\n\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE, DELETE_MANY } from 'react-admin';\n\n/**\n * @param {string[]|Object[]} trackedResources Array of resource names or array of Objects containing name and\n * optional path properties (path defaults to name)\n * @param {Object} firebaseConfig Options Firebase configuration\n */\n\nconst BaseConfiguration = {\n  initialQuerytimeout: 10000,\n  timestampFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n  }\n};\n\nconst RestProvider = (firebaseConfig = {}, options = {}) => {\n  options = Object.assign({}, BaseConfiguration, options);\n  const { timestampFieldNames, trackedResources } = options;\n\n  const resourcesStatus = {};\n  // const resourcesReferences = {};\n  const resourcesData = {};\n  const resourcesPaths = {};\n  const resourcesUploadFields = {};\n\n  if (firebase.apps.length === 0) {\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n  }\n\n  /* Functions */\n  const upload = options.upload || Methods.upload;\n  const save = options.save || Methods.save;\n  const del = options.del || Methods.del;\n  const getItemID = options.getItemID || Methods.getItemID;\n  const getOne = options.getOne || Methods.getOne;\n  const getMany = options.getMany || Methods.getMany;\n  const getManyReference = options.getManyReference || Methods.getManyReference;\n  const delMany = options.delMany || Methods.delMany;\n  const getList = options.getList || Methods.getList;\n\n  const firebaseSaveFilter = options.firebaseSaveFilter ? options.firebaseSaveFilter : data => data;\n  // const firebaseGetFilter = options.firebaseGetFilter ? options.firebaseGetFilter : data => data;\n\n  // Sanitize Resources\n  trackedResources.map((resource, index) => {\n    if (typeof resource === Array) {\n      resource = {\n        name: resource['name'],\n        path: resource['path'] || resource['name'],\n        uploadFields: resource['uploadFields'] || []\n      };\n      trackedResources[index] = resource;\n    }\n\n    const { name, path, uploadFields } = resource;\n    if (!resource.name) {\n      throw new Error(`name is missing from resource ${resource}`);\n    }\n    resourcesUploadFields[name] = uploadFields || [];\n    resourcesPaths[name] = path || name;\n    resourcesData[name] = {};\n  });\n\n  /**\n   * @param {string} type Request type, e.g GET_LIST\n   * @param {string} resourceName Resource name, e.g. \"posts\"\n   * @param {Object} payload Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a REST response\n   */\n\n  return async (type, resourceName, params) => {\n    await resourcesStatus[resourceName];\n    let result = null;\n    switch (type) {\n      case GET_LIST:\n        // console.log(params);\n        result = await getList(params, resourceName, resourcesData[resourceName]);\n        return result;\n      case GET_MANY:\n        result = await getMany(params, resourceName, resourcesData[resourceName]);\n        // console.log('GET_MANY');\n        return result;\n\n      case GET_MANY_REFERENCE:\n        // console.log('GET_MANY_REFERENCE');\n        result = await getManyReference(params, resourceName, resourcesData[resourceName]);\n        return result;\n\n      case GET_ONE:\n        // console.log('GET_ONE');\n        result = await getOne(params, resourceName, resourcesData[resourceName]);\n        return result;\n\n      case DELETE:\n        // console.log('DELETE');\n        const uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : [];\n        result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields);\n        return result;\n\n      case DELETE_MANY:\n        // console.log('DELETE_MANY');\n        result = await delMany(params.ids, resourceName, resourcesData[resourceName]);\n        return result;\n      case UPDATE:\n      case CREATE:\n        // console.log('UPDATE/CREATE');\n        let itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName]);\n        const uploads = resourcesUploadFields[resourceName]\n          ? resourcesUploadFields[resourceName].map(field =>\n              upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName])\n            )\n          : [];\n        \n        const currentData = resourcesData[resourceName][itemId] || {};\n        const uploadResults = await Promise.all(uploads);\n        \n        result = await save(\n          itemId,\n          params.data,\n          currentData,\n          resourceName,\n          resourcesPaths[resourceName],\n          firebaseSaveFilter,\n          uploadResults,\n          type === CREATE,\n          timestampFieldNames\n        );\n        return result;\n\n      default:\n        console.error('Undocumented method: ', type);\n        return { data: [] };\n    }\n  };\n};\n\nexport default RestProvider;"]},"metadata":{},"sourceType":"module"}